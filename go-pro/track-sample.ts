// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GpsFrame } from '../go-pro/gps-frame.js';


export class TrackSample {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackSample {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackSample(bb:flatbuffers.ByteBuffer, obj?:TrackSample):TrackSample {
  return (obj || new TrackSample()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackSample(bb:flatbuffers.ByteBuffer, obj?:TrackSample):TrackSample {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackSample()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

decodingTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

gps(obj?:GpsFrame):GpsFrame|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new GpsFrame()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTrackSample(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDecodingTime(builder:flatbuffers.Builder, decodingTime:number) {
  builder.addFieldInt32(0, decodingTime, 0);
}

static addGps(builder:flatbuffers.Builder, gpsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, gpsOffset, 0);
}

static endTrackSample(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
