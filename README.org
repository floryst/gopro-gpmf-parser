#+title: GPMF parser

* Parser usage
Install and initialize the poetry environment.

#+begin_example
poetry run python ./parse.py print | gps-json | gps-analyze | gps-flatbuffers
  print: outputs the GPMF frames to stdout
  gps-json: outputs GPS stream frames as JSON to stdout
  gps-analyze: outputs human-readable GPS stats
  gps-flatbuffers: outputs a flatbuffer representation of the GPS info.
#+end_example

* GPS data in flatbuffers
Flatbuffers provide a zero-copy means of packing, transmitting and reading the GPS data, since the JSON encoding is a lot of data.
** Building flatbuffers
#+begin_example
cd flatbuffers/
podman build -t flatbuffers:24.3.25 .
#+end_example
** Running flatbuffers
#+begin_example
podman run --rm -it -v "$PWD:/src" flatbuffers:24.3.25 /usr/bin/flatc --python --ts /src/schema.fbs
#+end_example

This will generate =schema.ts=, =go-pro= containing TypeScript code, and =GoPro= containing Python code.
