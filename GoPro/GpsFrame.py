# automatically generated by the FlatBuffers compiler, do not modify

# namespace: GoPro

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GpsFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GpsFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGpsFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GpsFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GpsFrame
    def Fix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # GpsFrame
    def Precision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # GpsFrame
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 20
            from GoPro.GpsSample import GpsSample
            obj = GpsSample()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GpsFrame
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GpsFrame
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def GpsFrameStart(builder):
    builder.StartObject(3)

def Start(builder):
    GpsFrameStart(builder)

def GpsFrameAddFix(builder, fix):
    builder.PrependUint8Slot(0, fix, 0)

def AddFix(builder, fix):
    GpsFrameAddFix(builder, fix)

def GpsFrameAddPrecision(builder, precision):
    builder.PrependUint16Slot(1, precision, 0)

def AddPrecision(builder, precision):
    GpsFrameAddPrecision(builder, precision)

def GpsFrameAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    GpsFrameAddData(builder, data)

def GpsFrameStartDataVector(builder, numElems):
    return builder.StartVector(20, numElems, 4)

def StartDataVector(builder, numElems):
    return GpsFrameStartDataVector(builder, numElems)

def GpsFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return GpsFrameEnd(builder)
