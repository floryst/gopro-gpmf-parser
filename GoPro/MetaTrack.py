# automatically generated by the FlatBuffers compiler, do not modify

# namespace: GoPro

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MetaTrack(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MetaTrack()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMetaTrack(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MetaTrack
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MetaTrack
    def Samples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from GoPro.TrackSample import TrackSample
            obj = TrackSample()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MetaTrack
    def SamplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MetaTrack
    def SamplesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MetaTrackStart(builder):
    builder.StartObject(1)

def Start(builder):
    MetaTrackStart(builder)

def MetaTrackAddSamples(builder, samples):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(samples), 0)

def AddSamples(builder, samples):
    MetaTrackAddSamples(builder, samples)

def MetaTrackStartSamplesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSamplesVector(builder, numElems):
    return MetaTrackStartSamplesVector(builder, numElems)

def MetaTrackEnd(builder):
    return builder.EndObject()

def End(builder):
    return MetaTrackEnd(builder)
